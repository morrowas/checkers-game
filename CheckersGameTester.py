# Author: Ashley Morrow
# GitHub username: morrowas
# Date: 03/15/2023
# Description: Unit tests for CheckersGame program.

import unittest
from CheckersGame import InvalidSquare, OutofTurn, InvalidPlayer, Checkers, Player

class TestCheckers(unittest.TestCase):
    """Contains unit tests for the Checkers function."""

    def test_1(self):
        """Test to see if the play_game method returns a value of 1 when a piece is captured."""
        game = Checkers()
        Player1 = game.create_player("Ashley", "Black")
        Player2 = game.create_player("Tiffany", "White")
        game.play_game("Ashley", (5, 0), (4, 1))
        game.play_game("Tiffany", (2, 1), (3, 2))
        game.play_game("Ashley", (4, 1), (3, 0))
        game.play_game("Tiffany", (1, 0), (2, 1))
        game.play_game("Ashley", (5, 6), (4, 7))
        game.play_game("Tiffany", (3, 2), (4, 3))
        result = game.play_game("Ashley", (5, 4), (3, 2))
        self.assertEqual(result, 1)

    def test_2(self):
        """Tests to see if a Player object has a king count of 1 once a king is created."""
        game = Checkers()
        Player1 = game.create_player("Ashley", "Black")
        Player2 = game.create_player("Tiffany", "White")
        game.play_game("Ashley", (5, 0), (4, 1))
        game.play_game("Tiffany", (2, 1), (3, 2))
        game.play_game("Ashley", (4, 1), (3, 0))
        game.play_game("Tiffany", (1, 0), (2, 1))
        game.play_game("Ashley", (5, 6), (4, 7))
        game.play_game("Tiffany", (3, 2), (4, 3))
        game.play_game("Ashley", (5, 4), (3, 2))
        game.play_game("Ashley", (3, 2), (1, 0))
        game.play_game("Tiffany", (1, 2), (2, 1))
        game.play_game("Ashley", (3, 0), (1, 2))
        game.play_game("Tiffany", (0, 3), (2, 1))
        game.play_game("Ashley", (5, 2), (4, 3))
        game.play_game("Tiffany", (0, 1), (1, 2))
        game.play_game("Ashley", (1, 0), (0, 1))
        result = Player1.get_king_count()
        self.assertEqual(result, 1)

    def test_3(self):
        """Tests to see if the first move in a game changes the board."""
        game = Checkers()
        Player1 = game.create_player("Ashley", "Black")
        Player2 = game.create_player("Tiffany", "White")
        game.play_game("Ashley", (5, 0), (4, 1))
        result = game.get_checker_details((4,1))
        self.assertNotEqual(result, None) #Test to see if square is not equal to None

    def test_4(self):
        """Tests to see if a triple king is created when a king lands back to its original line."""
        game = Checkers()
        Player1 = game.create_player("Ashley", "Black")
        Player2 = game.create_player("Tiffany", "White")
        game.play_game("Ashley", (5, 0), (4, 1))
        game.play_game("Tiffany", (2, 1), (3, 2))
        game.play_game("Ashley", (4, 1), (3, 0))
        game.play_game("Tiffany", (1, 0), (2, 1))
        game.play_game("Ashley", (5, 6), (4, 7))
        game.play_game("Tiffany", (3, 2), (4, 3))
        game.play_game("Ashley", (5, 4), (3, 2))
        game.play_game("Ashley", (3, 2), (1, 0))
        game.play_game("Tiffany", (1, 2), (2, 1))
        game.play_game("Ashley", (3, 0), (1, 2))
        game.play_game("Tiffany", (0, 3), (2, 1))
        game.play_game("Ashley", (5, 2), (4, 3))
        game.play_game("Tiffany", (0, 1), (1, 2))
        game.play_game("Ashley", (1, 0), (0, 1))
        game.play_game("Tiffany", (2, 1), (3, 0))
        game.play_game("Ashley", (6, 1), (5, 2))
        game.play_game("Tiffany", (1, 2), (2, 1))
        game.play_game("Ashley", (0, 1), (3, 4))
        game.play_game("Tiffany", (2, 1), (3, 2))
        game.play_game("Ashley", (4, 3), (2, 1))
        game.play_game("Tiffany", (2, 7), (3, 6))
        game.play_game("Ashley", (3, 4), (4, 3))
        game.play_game("Tiffany", (1, 6), (2, 7))
        game.play_game("Ashley", (2, 1), (1, 0))
        game.play_game("Tiffany", (0, 5), (1, 6))
        game.play_game("Ashley", (1, 0), (0, 1))
        game.play_game("Tiffany", (3, 6), (4, 5))
        game.play_game("Ashley", (0, 1), (5, 6))
        game.play_game("Tiffany", (2, 7), (3, 6))
        game.play_game("Ashley", (6, 5), (5, 4))
        game.play_game("Tiffany", (3, 6), (4, 5))
        game.play_game("Ashley", (5, 4), (3, 6))
        game.play_game("Tiffany", (1, 6), (2, 7))
        game.play_game("Ashley", (4, 3), (1, 6))
        game.play_game("Tiffany", (0, 7), (2, 5))
        game.play_game("Ashley", (5, 6), (6, 5))
        game.play_game("Tiffany", (2, 5), (3, 4))
        game.play_game("Ashley", (6, 7), (5, 6))
        game.play_game("Tiffany", (2, 7), (4, 5))
        game.play_game("Tiffany", (4, 5), (6, 7))
        game.play_game("Ashley", (6, 3), (5, 4))
        game.play_game("Tiffany", (1, 4), (2, 5))
        game.play_game("Ashley", (7, 4), (6, 3))
        game.play_game("Tiffany", (2, 5), (3, 6))
        game.play_game("Ashley", (4, 7), (2, 5))
        game.play_game("Tiffany", (3, 4), (4, 3))
        game.play_game("Ashley", (6, 5), (7, 4))
        game.play_game("Tiffany", (4, 3), (6, 5))
        game.play_game("Ashley", (5, 2), (4, 3))
        game.play_game("Tiffany", (6, 7), (5, 6))
        game.play_game("Ashley", (7, 4), (4, 7))
        game.play_game("Tiffany", (3, 0), (4, 1))
        game.play_game("Ashley", (7, 0), (6, 1))
        game.play_game("Tiffany", (4, 1), (5, 2))
        game.play_game("Ashley", (6, 3), (4, 1))
        result = Player1.get_triple_king_count()
        self.assertEqual(result, 1)

    def test_5(self):
        """Tests to see if game winner method returns the player name."""
        game = Checkers()
        Player1 = game.create_player("Ashley", "Black")
        Player2 = game.create_player("Tiffany", "White")
        game.play_game("Ashley", (5, 0), (4, 1))
        game.play_game("Tiffany", (2, 1), (3, 2))
        game.play_game("Ashley", (4, 1), (3, 0))
        game.play_game("Tiffany", (1, 0), (2, 1))
        game.play_game("Ashley", (5, 6), (4, 7))
        game.play_game("Tiffany", (3, 2), (4, 3))
        game.play_game("Ashley", (5, 4), (3, 2))
        game.play_game("Ashley", (3, 2), (1, 0))
        game.play_game("Tiffany", (1, 2), (2, 1))
        game.play_game("Ashley", (3, 0), (1, 2))
        game.play_game("Tiffany", (0, 3), (2, 1))
        game.play_game("Ashley", (5, 2), (4, 3))
        game.play_game("Tiffany", (0, 1), (1, 2))
        game.play_game("Ashley", (1, 0), (0, 1))
        game.play_game("Tiffany", (2, 1), (3, 0))
        game.play_game("Ashley", (6, 1), (5, 2))
        game.play_game("Tiffany", (1, 2), (2, 1))
        game.play_game("Ashley", (0, 1), (3, 4))
        game.play_game("Tiffany", (2, 1), (3, 2))
        game.play_game("Ashley", (4, 3), (2, 1))
        game.play_game("Tiffany", (2, 7), (3, 6))
        game.play_game("Ashley", (3, 4), (4, 3))
        game.play_game("Tiffany", (1, 6), (2, 7))
        game.play_game("Ashley", (2, 1), (1, 0))
        game.play_game("Tiffany", (0, 5), (1, 6))
        game.play_game("Ashley", (1, 0), (0, 1))
        game.play_game("Tiffany", (3, 6), (4, 5))
        game.play_game("Ashley", (0, 1), (5, 6))
        game.play_game("Tiffany", (2, 7), (3, 6))
        game.play_game("Ashley", (6, 5), (5, 4))
        game.play_game("Tiffany", (3, 6), (4, 5))
        game.play_game("Ashley", (5, 4), (3, 6))
        game.play_game("Tiffany", (1, 6), (2, 7))
        game.play_game("Ashley", (4, 3), (1, 6))
        game.play_game("Tiffany", (0, 7), (2, 5))
        game.play_game("Ashley", (5, 6), (6, 5))
        game.play_game("Tiffany", (2, 5), (3, 4))
        game.play_game("Ashley", (6, 7), (5, 6))
        game.play_game("Tiffany", (2, 7), (4, 5))
        game.play_game("Tiffany", (4, 5), (6, 7))
        game.play_game("Ashley", (6, 3), (5, 4))
        game.play_game("Tiffany", (1, 4), (2, 5))
        game.play_game("Ashley", (7, 4), (6, 3))
        game.play_game("Tiffany", (2, 5), (3, 6))
        game.play_game("Ashley", (4, 7), (2, 5))
        game.play_game("Tiffany", (3, 4), (4, 3))
        game.play_game("Ashley", (6, 5), (7, 4))
        game.play_game("Tiffany", (4, 3), (6, 5))
        game.play_game("Ashley", (5, 2), (4, 3))
        game.play_game("Tiffany", (6, 7), (5, 6))
        game.play_game("Ashley", (7, 4), (4, 7))
        game.play_game("Tiffany", (3, 0), (4, 1))
        game.play_game("Ashley", (7, 0), (6, 1))
        game.play_game("Tiffany", (4, 1), (5, 2))
        game.play_game("Ashley", (6, 3), (4, 1))
        result = game.game_winner()
        self.assertEqual(result, "Ashley")

